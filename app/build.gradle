apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.setup.compileSdk
    buildToolsVersion rootProject.setup.buildTools

    defaultConfig {
        minSdkVersion rootProject.setup.minSdk
        targetSdkVersion rootProject.setup.targetSdk
        versionCode 1
        versionName "1.0"

        applicationId "com.yomii.gradleoptimize"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //multiDex，需要在Application初始化
        multiDexEnabled true
        //开启Vector兼容
        vectorDrawables.setUseSupportLibrary(true)
        // manifest可以引用的占位符
        manifestPlaceholders = [key: "value"]
    }

    //开启dataBinding库功能
    dataBinding {
        enabled true
    }

    dexOptions {
        //开启Libraries预Dex化，该设置会提高增量编译速度，也就是写一点运行一下，但会降低clean project速度
        //官方推荐在持续集成服务器中关闭此特性，有些库会对这条属性做修改，报冲突的话就注释掉
        preDexLibraries true
        //同时处理进程数，默认4
        maxProcessCount 8
        //最大java堆容量，字面意思，需要注意的是该设置与gradle.properties文件中的org.gradle.jvmargs设置
        //互有影响，org.gradle.jvmargs的数值必须比javaMaxHeapSize数值最少高512MB，并且如果不设置该值，
        // org.gradle.jvmargs也最少需要1536m，因为javaMaxHeapSize默认1024m。
        // javaMaxHeapSize "2048m"  //越大越好，这是官方指南写的 （看你的内存余量而定）
    }

    //打包时排除内容，有时候重复依赖或正好有同名文件会产生冲突，比如同时compile rxjava1 和rxjava2，需要如下排除
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    flavorDimensions "demos", "category" // demo,版本类型

    productFlavors { //产品类型

        //这个代码块是用来定义产品风格和类型的，可以将有关产品的一些设置覆盖defaultConfig
        //它和buildTypes的组合统称为构建变体，最终产生flavor 乘 type个变体数量，每个变体都有对应的Task
        //因此渠道很多的话不建议在这块做多渠道打包，会导致assemble时间特别长

        demo { //演示开发中的第二代产品新功能,添加后缀以区别正式包
            dimension "demos"
            applicationIdSuffix ".demo"
            versionCode 2
            versionName "2.0-demo" //不使用后缀的写法
        }
        permissiondemo { //演示第二代产品的permission动态请求效果 要求最低6.0系统
            dimension "demos"
            applicationIdSuffix ".permission"
            manifestPlaceholders = [flavor: ".permission"]
            minSdkVersion 23
            versionCode 2
            versionName "2.0"
            versionNameSuffix "-permission" //使用后缀的写法
        }

        free {  // 免费版产品  限制功能
            dimension "category"
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
            //在BuildConfig类中创建一个可被java代码读取的属性
            buildConfigField "int", "function", "2"
        }
        enterprise {  //企业版产品  增强功能
            dimension "category"
            applicationIdSuffix ".enterprise"
            versionNameSuffix "-enterprise"
            buildConfigField "int", "function", "3"
        }
    }

    signingConfigs {
        debug { //使用统一的debug.keystore，防止不同机器编译安装apk的key不同
            storeFile file("debug.keystore")
        }
        release {
            // module下创建一个signing.properties，保持钥匙密码信息
            // 如果多人协作，不同开发者的钥匙储存位置不一样，所以STORE_FILE保存在local.properties中
            File propFile = file('signing.properties')
            if (propFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') &&
                        props.containsKey('KEY_PASSWORD')) {
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                    props.load(new FileInputStream(file('../local.properties')))
                    storeFile = file(props['STORE_FILE'])
                } else {
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                android.buildTypes.release.signingConfig = null
            }
        }
    }

    buildTypes { //构建类型  一般定义debug和release即可
        //关闭内置的没啥用的Crash分析库，提升速度
        //该库信息可以看 https://docs.fabric.io/android/crashlytics/overview.html
        ext.enableCrashlytics = false

        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            //增加.debug后缀与正式版做区别，用途是可以在测试机上同时安装debug版与正式版
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        //假设要打包出一个不签名版本，那么增加如下设置
//        unsigned { //不签名版本 需要用apkSigner手动签名与zipAlign
//            minifyEnabled true
//            zipAlignEnabled false
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
    }

//1. Gradle 从上往下顺序读取，所以signingConfig变量定义也要在buildTypes使用之前

//2. Suffix添加的顺序是 applicationId + productavor suffix + buildType suffix
//   假设是企业版的debug版本，实际applicationId为 com.yomii.gradleoptimize.enterprise.debug
//   微信回调所用的EntryActivity只取applicationId，不用管Suffix

//3. 适配7.0+的FileProvider时，假设你使用ApplicationId作为Authority，那么即使使用了Suffix也会
//   由于Authority在手机的唯一性而无法安装，需要使用Manifest占位符

}

dependencies {
    /*
    * 引用依赖的关键字自4.1版本改了，4种类型的意思是
    *
    * api：跟原来的compile一样，每次都编译，能够暴露库内部的资源，一般用在library module
    *
    *       module A api something：1.0.0
    *       module B implementation A
    *
    *       这时 B 能拿到 something 库中的资源，用来继承引用等等
    *
    * implementation ：单纯实现，不变化的话不编译，能提高编译效率，普通依赖都用它
    *
    * compileOnly：只用来编译时提供引用，依赖不打包进代码，可以减小包体积，同时减少冲突，一般用在 library module
    *
    *       module A compileOnly something：1.0.0
    *       module B implementation A
    *       module B implementation something：1.0.0
    *
    *       这时 A 能只编译，不引用，因为依赖 A 的 module 也配置了这个依赖
    *
    * apk：不编译，只把依赖加进代码，这个我也没用过，可能动态加载时候需要用到
    *
    * */


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    //multiDex
    implementation 'com.android.support:multidex:1.0.2'
    //support
    api "com.android.support:appcompat-v7:$rootProject.versions.libSupport"
    implementation "com.android.support:support-v4:$rootProject.versions.libSupport"
    implementation "com.android.support:recyclerview-v7:$rootProject.versions.libSupport"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    //网络
    implementation "com.squareup.retrofit2:retrofit:$rootProject.versions.libRetrofit"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.versions.libRetrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.versions.libRetrofit"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.versions.libOkhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.versions.libOkhttp"
    //rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.versions.libRxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.versions.libRxJava"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.versions.libRxBinding"
    //注入
    implementation "com.jakewharton:butterknife:$rootProject.versions.libButterKnife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.versions.libButterKnife"
    //图片
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    //图片裁剪库 https://github.com/crazycodeboy/TakePhoto
    implementation('com.jph.takephoto:takephoto_library:4.0.3', {
        //排除其内部依赖库，避免compile rx1
        exclude module: 'rxjava', group: 'io.reactivex'
        exclude module: 'rxandroid', group: 'io.reactivex'
    })
}
