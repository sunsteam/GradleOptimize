//https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#%E6%AF%8F%E6%AC%A1%E7%BC%96%E8%AF%91%E6%88%91%E5%BA%94%E8%AF%A5%E4%BF%9D%E7%95%99%E5%93%AA%E4%BA%9B%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%85%BC%E5%AE%B9andresguard

dependencies {
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.13.2'
}

apply plugin: 'com.tencent.tinker.patch'

import java.util.regex.Matcher
import java.util.regex.Pattern

def bakPath = file("${project.projectDir}/bakApk")

project.ext.bakPath = bakPath


def flavorDir = ""
def flavorPrefix = ""
if (flavorName != ""){
    flavorDir = "/${flavorName}"
    flavorPrefix = "-${flavorName}"
}
//路径
def pathPrefix = "${bakPath}/${baseApkDir}${flavorDir}"
//文件名
def name = "${project.name}${flavorPrefix}-${variantName}"


/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    //是否使用tinker编译，用于兼容开发时instant run模式
    tinkerEnable = isRelease()

    //编译补丁包时，必需指定基线版本的apk，默认值为空
    oldApk = "${pathPrefix}/${name}-andresguard.apk"

    //在编译的patch可能有风险时，将中断编译。
    ignoreWarning = false

    //在运行过程中，我们需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名。
    useSign = true

    //选填，设置编译输出路径, 默认值 build/outputs/tinkerPatch
    //outputFolder = build/outputs/tinkerPatch

    buildConfig {
        // 默认 false, 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
        keepDexApply = false
        // 在 overrideTinkerPatchConfiguration 为 false时， 需要使用下面这行定义 tinkerId
        tinkerId = "$outTinkerId"
        // 可选，设置mapping文件，建议保持旧apk的proguard混淆方式
        applyMapping = "${pathPrefix}/${name}-mapping.txt"
        // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
        applyResourceMapping = "${pathPrefix}/${name}-R.txt"
        // 是否启用加固模式，默认为false. 打开后只允许加固后的app使用
        isProtectedApp = false
        // 是否支持新增非export的Activity
        supportHotplugComponent = false
    }

    dex {
        dexMode = "jar"
        //需要处理的dex路径 支持*、?通配符，必须使用'/'分割。路径是相对安装包的
        pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
        //定义了加载补丁包时需要的类和不希望被Tinker修改的类,这些类的直接引用类也要加入, 没有就不用填
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        //只有符合条件的资源才会被整合到资源包
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        //要忽略的资源
        ignoreChange = []
        //单位kb, 大于该值会修改资源比较算法用来降低补丁包大小,但增加合成复杂度
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        //压缩工具版本, 包含了7za工具, 正好和 resguard 版本一致
        zipArtifact = "com.tencent.mm:SevenZip:${ANDRESGUARD_VERSION}"
        //从系统中指定7za路径, 没有就不用填
        //path = "/usr/local/bin/7za"
    }
}

/**
 * 用于用户在代码中判断tinkerPatch是否被使能
 */
android {
    defaultConfig {
        buildConfigField "boolean", "TINKER_ENABLE", "${tinkerPatch.tinkerEnable}"
    }
}


/**
 * 如果只想在Release中打开tinker，可以把tinkerEnable赋值为这个函数的return
 * @return 是否为release
 */
boolean isRelease() {
    String  tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    Pattern pattern
    if (tskReqStr.contains("resguard")) {
        println tskReqStr
        pattern = Pattern.compile("resguard(\\w*)(Release|Debug)")
    } else if (tskReqStr.contains("assemble")) {
        println tskReqStr
        pattern = Pattern.compile("assemble(\\w*)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w*)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        String task = matcher.group(0).toLowerCase()
        println("[BuildType] Current task: " + task)
        return task.contains("release")
    } else {
        println "[BuildType] NO MATCH FOUND"
        return true
    }
}

apply from: "resguard.gradle"

